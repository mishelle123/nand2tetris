// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load=1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // update the load bit to every register 
    DMux8Way(in=load, sel=address, a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8);
    // build 8-register array
    Register(in[0..15]=in, load=load1, out=r1);
    Register(in[0..15]=in, load=load2, out=r2);
    Register(in[0..15]=in, load=load3, out=r3);
    Register(in[0..15]=in, load=load4, out=r4);
    Register(in[0..15]=in, load=load5, out=r5);
    Register(in[0..15]=in, load=load6, out=r6);
    Register(in[0..15]=in, load=load7, out=r7);
    Register(in[0..15]=in, load=load8, out=r8);
    // return the specify register
    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5,f=r6, g=r7, h=r8, sel=address, out=out);
}