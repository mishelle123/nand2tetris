// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // parse
    Findmsb(a=instruction, out=instMsb); //finds the msb
    Decode(a=instruction, AorM=AorM, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6, 	loadA=loadA, 
    loadD=loadD, storeM=writeM, j1=j1, j2=j2, j3=j3); 
      
    Mux16(a=instruction, b=outALU, sel=instMsb, out=outInstMux);
    ARegister(in=outInstMux, load=loadA, out=registerA, out[0..14]=addressM);
    DRegister(in=outALU, load=loadD, out=registerD);
    Mux16(a=registerA, b=inM, sel=AorM, out=outAorM);
   
    ALU(x=registerD, y=outAorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, 
    out=outM, zr=zeroALU, ng=ngALU); // ALU chip
    PCload(j1=j1, j2=j2, j3=j3, zeroALU=zeroALU, ngALU=ngALU, loadbit=loadbit); //return the load bit 
    PC(in=registerA, load=loadbit, inc=true, reset=reset, out[0..14]=pc);
    
    
}
